
<%- include('partials/header') %>
<%- include('partials/nav') %>

<div id="app" class="container py-5">
    <h1 class="mb-4 text-center">{{ title }}</h1>

    <!-- Register new user form -->
    <div class="card mb-4">
        <div class="card-body">
            <h6>Register new user:</h6>
            <div class="row g-3">
                <div class="col-md-3">
                    <input  v-model="newUser.name" 
                            class="form-control" 
                            placeholder="New user name">
                </div>
                <div class="col-md-4">
                    <input  v-model="newUser.email" 
                            class="form-control" 
                            placeholder="New user e-mail">
                </div>
                <div class="col-md-3">
                    <!-- @input call the formatPhone method to format the phone number in real time +CC (DDD) NNNNN-NNNN-->
                    <!-- Not working as i wanted, will change the order right to left, allowing input without +CC assuming +55 as default -->
                    <input  v-model="newUser.phone"
                            @input="newUser.phone = formatPhone(newUser.phone)"  
                            class="form-control" 
                            placeholder="New user phone">
                </div>

                <div class="col-md-2 d-flex gap-2">
                    <button @click="addUser" class="btn btn-primary w-100">Add User</button>
                </div>
            </div>
        </div>
    </div>

        <!-- Users table -->
    <div class="card shadow-sm">
        <div class="card-body">
            <table class="table table-striped table-hover">
                <thead class="table-dark">
                    <tr>
                        <!-- filter field bellow the title name and e-mail -->
                        <th>
                            Name <input v-model="filter.name" class="form-control form-control-sm mt-1" placeholder="Filter by name">
                        </th>
                        <th>
                            E-mail <input v-model="filter.email" class="form-control form-control-sm mt-1" placeholder="Filter by email">
                        </th>
                    </tr>
                </thead>

                <tbody>
                    <!-- loading within table -->
                    <tr v-if="loading">
                        <td colspan="2" class="text-center">
                            <div class="d-flex justify-content-center align-items-center gap-2">
                                <div class="spinner-border text-primary" role="status"></div>
                                <span>Loading ...</span>
                            </div>
                        </td>
                    </tr>
                    <!-- if users is empty -> not found message -->
                    <tr v-else-if="users.length === 0">
                        <td colspan="2" class="text-center text-muted">
                            User not found.
                        </td>
                    </tr>
                    <!-- Users List -->
                    <tr v-else v-for="user in users" :key="user.id">
                        <td>
                            <a :href="`/users/details/${user.id}`" style="color: inherit; text-decoration: none;">{{ user.name }}</a>
                        </td>
                        <td>{{ user.email }}</td>
                    </tr>
                </tbody>
            </table>
            <!-- Pagination -->
            <div class="d-flex justify-content-between align-items-center mb-3">
                <div>
                    <button 
                        class="btn btn-outline-primary btn-sm"
                        :disabled="pagination.page === 1"
                        @click="prevPage">
                        Previous
                    </button>
                    <button 
                        class="btn btn-outline-primary btn-sm ms-2"
                        :disabled="pagination.page === pagination.totalPages"
                        @click="nextPage">
                        Next
                    </button>
                </div>
                <div>
                    Page {{ pagination.page }} of {{ pagination.totalPages }}
                </div>
            </div>
        </div>
             
    </div>
</div>


<script>
    const { createApp } = Vue;
    // debounce function
    function debounce(func, wait) {
        let timeout;
        return function(...args) {
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(this, args), wait);
        };
    }

    createApp({
        data() {
            return {
                title: 'User Management',
                users: [],
                filter: {
                    name: '',
                    email: ''
                },
                newUser: {
                    name: '',
                    email: '',
                    phone: '',
                    
                },
                pagination: {
                    page: 1,
                    limit: 20,
                    totalPages: 1
            },
                loading: false
            }
        },
        methods: {
            //List Users using filter params, send the pagination info too.
            async listUsers() {
                const params = new URLSearchParams();
                if (this.filter.name) params.append('name', this.filter.name);
                if (this.filter.email) params.append('email', this.filter.email);

                params.append('page', this.pagination.page);
                params.append('limit', this.pagination.limit);

                const url = `/users?${params.toString()}`;
                //loading is just to show user the loading... while wait json response.
                try {
                    this.loading = true;
                    const response = await fetch(url);
                    const data = await response.json();
                    this.users = data.users;
                    this.pagination.totalPages = data.totalPages;
                    console.log(this.pagination);
                } catch (error) {
                    console.error('Erro ao buscar usuários:', error); 
                } finally {
                    this.loading = false;
                }
            },
            // add User method verify if all field is filled, and chech if the e-mail and phone number is valid (just the format)
            async addUser() {
                if (!this.newUser.name || !this.newUser.email || !this.newUser.phone) {
                    alert('Please fill the required fields (name, email, phone)');
                    return;
                }
                console.log('estive aqui validando email');
                if (!this.validateEmail(this.newUser.email)) {
                    
                    alert('Please enter a valid email.');
                    return;
                }

                const phoneDigits = this.newUser.phone.replace(/\D/g,'');
                if (phoneDigits.length < 11) {
                    alert('Please enter a valid phone number.');
                    return;
                }
                //CSRF TOKEN
                const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
                try {
                    const response = await fetch('/users', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'CSRF-Token': csrfToken
                        },
                        body: JSON.stringify({
                            name: this.newUser.name,
                            email: this.newUser.email,
                            phone: this.newUser.phone
                        })
                    });

                    if (!response.ok) {
                        const err = await response.json();
                        throw new Error(err.message || 'Error adding user');
                    }

                    const createdUser = await response.json();
                    this.users.push(createdUser);
                    alert('Registered successfully!');
                    // clean fields
                    this.newUser.name = '';
                    this.newUser.email = '';
                    this.newUser.phone = '';

                } catch (error) {
                    console.error('Error adding user:', error);
                    alert(error.message);
                }
            },
            formatPhone(phone) {
                    // only numbers
                phone = phone.replace(/\D/g, '');
                console.log('estive aqui');
                // Aplica a máscara +CC (DDD) NNNNN-NNNN
                let formatted = '';

                if (phone.length > 0)   formatted += `+${phone.slice(0, 2)}`; 
                if (phone.length >= 3)  formatted += ` (${phone.slice(2, 4)}`;
                if (phone.length >= 5)  formatted += `) ${phone.slice(4, 9)}`;
                if (phone.length >= 10) formatted += `-${phone.slice(9, 13)}`;

                return formatted;
            },
            validateEmail(email) {
                //validation through regex
                const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                return re.test(email);
            },
            nextPage() {
                if (this.pagination.page < this.pagination.totalPages) {
                    this.pagination.page++;
                    this.listUsers();
                }
            },
            prevPage() {
                if (this.pagination.page > 1) {
                    this.pagination.page--;
                    this.listUsers();
                }
            },
            cleanFilter() {
                this.filter.name = '';
                this.filter.email = '';
                this.listUsers();
            }
        },
        watch: {
            'filter.name': {
                handler: debounce(function() {
                    this.pagination.page = 1;
                    this.listUsers();
                }, 500),
                immediate: false
            },
            'filter.email': {
                handler: debounce(function() {
                    this.pagination.page = 1;
                    this.listUsers();
                }, 500),
                immediate: false
            }
        },
        mounted() {
            this.listUsers();
        }
    }).mount('#app');

    
</script>
<%- include('partials/footer') %>
